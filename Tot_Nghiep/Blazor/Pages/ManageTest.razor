@page "/manage-test"
@using global::Data.DTOs
@layout Teacherlayout
@inject HttpClient client
@inject IHttpClientFactory clientFactory;
@inject NavigationManager NavigationManager
@inject IJSRuntime Jsruntime
<div class="container-fluid row p-3">


    <div class="container mt-4">
        <div class="row mb-4">
            <div class="col">
                <h2>Danh sách đề</h2>
            </div>
            <div class="col text-end">

                <button class="btn btn-primary" @onclick="SearchTests">Tìm kiếm</button>
                <button class="btn btn-primary" @onclick="ShowCreateTestModal">Tạo đề thi</button>
            </div>
        </div>

        <div class="table-responsive">
            <table class="table table-bordered">
                <thead class="table-light">
                    <tr>

                        <th scope="col">Mã đề</th>
                        <th scope="col">Tên đề</th>
                        <th scope="col">Loại đề</th>
                        <th scope="col">Môn</th>
                        <th scope="col">Lớp</th>
                        <th scope="col">Hành động</th>
                    </tr>
                </thead>
                <tbody>
                    @if (testList == null)
                    {
                        <tr>
                            <td colspan="6" class="text-center">Loading...</td>
                        </tr>
                    }
                    else if (!testList.Any())
                    {
                        <tr>
                            <td colspan="6" class="text-center">không tìm thấy đề thi</td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var test in testList)
                        {
                            <tr>

                                <td>@test.Id.ToString("N")</td>
                                <td>@test.Name</td>
                                <td>@test.namepoint</td>
                                <td>@test.SubjectName</td>
                                <td>@test.nameclass</td>
                                <td>@test.nameclass</td>
                                <td>
                                    @* <button class="btn btn-info" @onclick="()=>Submit(true,test.Id)">Sửa</button> *@
                                    <button class="btn btn-danger" @onclick="()=>Delete(test.Id)">Xóa</button>
                                    <button class="btn btn-primary " @onclick="ShowQuestionDetailModal">thêm câu hỏi</button>
                                    <button class="btn btn-warning ">sinh đề</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="modal fade @(isCreateTestModalVisible  ? "show" : "")" tabindex="-1" style="display:@(isCreateTestModalVisible  ? "block" : "none")">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Tạo Đề Thi</h5>
                    <button type="button" class="btn-close" @onclick="HideCreateTestModal"></button>
                </div>
                <div class="modal-body">
                    <div>
                        <label>Tên Đề:</label>
                        <input type="text" class="form-control" @bind=testDTO.Name />
                    </div>
                    <div>
                        <label>Thời Gian</label>
                        <input type="text" class="form-control" @bind=testDTO.Minute />
                    </div>
                    <div>
                        <label>Môn học</label>
                        <select class="form-control" @bind="testDTO.SubjectId">
                            <option value="value">--chọn--</option>
                            @foreach (var item in subjectDTOs)
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label>Lớp:</label>
                        <select class="form-control" @bind="testDTO.ClassCode">
                            <option value="value">--chọn--</option>
                            @foreach (var item in classDTOs)
                            {
                                <option value="@item.Code">@item.Name </option>
                            }
                        </select>
                    </div>
                    <div>
                        <label>Điểm:</label>
                        <select class="form-control" @bind="testDTO.PointTypeId">
                            <option value="value">--chọn--</option>
                            @foreach (var item in pointTypeDTOs)
                            {
                                <option value="@item.Id">@item.Name </option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="Submit">Lưu</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade @(isQuestionDetailModalVisible ? "show" : "")" tabindex="-1" style="display:@(isQuestionDetailModalVisible ? "block" : "none")">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Thêm câu hỏi</h5>
                    <button type="button" class="btn-close" @onclick="HideQuestionDetailModal"></button>
                </div>
                <div class="modal-body">
                    <div class="container">
                        <div class="row mt-3">
                            <div class="col-12">
                                <label>Gói đề;</label>
                                <select @bind="testQuestion_TestQuestionAnswersDTO.TestId" class="form-select">
                                    <option selected>--chọn--</option>
                                    @foreach (var item in testList)
                                    {
                                        <option value="@item.Id">@item.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-6">
                                <label>Loại câu hỏi:</label>
                                <select class="form-select" @bind="testQuestion_TestQuestionAnswersDTO.QuestionType">
                                    <option value="">--chọn--</option>
                                    <option value="1">Một đáp án</option>
                                    <option value="2">Nhiều đáp án</option>
                                </select>
                            </div>
                            <div class="col-6">
                                <label>Độ khó:</label>
                                <select class="form-select" @bind="testQuestion_TestQuestionAnswersDTO.Level">
                                    <option value="">--chọn--</option>
                                    <option value="1">Dễ</option>
                                    <option value="2">Trung bình</option>
                                    <option value="3">Khó</option>
                                    <option value="4">Rất khó</option>
                                </select>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-12">
                                <label>Câu hỏi:</label>
                                <input type="text" class="form-control" @bind="testQuestion.QuestionName" placeholder="Nhập câu hỏi" />
                            </div>
                        </div>



                        <div class="row mt-3">
                            <div class="col-12">
                                <label>Các đáp án:</label>
                                @for (int i = 0; i < numberOfAnswers; i++)
                                {
                                    <div class="mb-2">
                                        <input type="text" @oninput="(e) => UpdateAnswer(e, i)" class="form-control" placeholder="Nhập đáp án" />

                                    </div>
                                }
                            </div>
                        </div>



                        <div class="modal-footer">
                            <button type="button" class="btn btn-primary"><i class="bi bi-file-earmark-excel"></i>Thêm file Excel</button>
                            @*   <button class="btn btn-primary" @onclick="AddQuestion">Thêm câu hỏi</button> *@
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private void UpdateAnswer(ChangeEventArgs e, int index)
    {
        // if (index >= 0 && index < testQuestion_TestQuestionAnswersDTO.Answers.Count)
        // {
        //      testQuestion_TestQuestionAnswersDTO.Answers[index] = e.Value?.ToString() ?? string.Empty;

        // }

    }

    private int numberOfAnswers = 4;
    private TestQuestion_TestQuestionAnswersDTO testQuestion_TestQuestionAnswersDTO = new TestQuestion_TestQuestionAnswersDTO
    {
        // Answers = new List<string> { "", "", "", "" },
        // CorrectAnswers= new List<string>()
    };
    private List<TestGridDTO> testList = new List<TestGridDTO>();
    private TestQuestionDTO testQuestion = new TestQuestionDTO();
    private GetListTestQueryDTO queryDTO = new GetListTestQueryDTO();
    private List<TestQuestionDTO> testQuestionDTOs = new List<TestQuestionDTO>();
    private List<SubjectDTO> subjectDTOs = new List<SubjectDTO>();
    private List<ClassDTO> classDTOs = new List<ClassDTO>();
    private List<PointTypeDTO> pointTypeDTOs = new List<PointTypeDTO>();
    private TestDTO testDTO = new TestDTO();
    // private void AddAnswer()
    // {
    //     tempAnswers.Add(string.Empty); // Thêm một chuỗi rỗng cho đáp án mới
    // }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await SearchTests();
            await detailclass();
            await detailsubject();
            await detailpoint();
        }
        catch (Exception ex)
        {

        }
    }

    private async Task detailpoint()
    {
        var httpclient = clientFactory.CreateClient("Get");
        var url = $"https://localhost:7039/api/PointType/GetAll_pointtype";
        pointTypeDTOs = await httpclient.GetFromJsonAsync<List<PointTypeDTO>>(url);
    }
    private async Task detailsubject()
    {
        var httpclient = clientFactory.CreateClient("Get");
        var url = $"https://localhost:7039/api/Subject/get-all-subject";
        subjectDTOs = await httpclient.GetFromJsonAsync<List<SubjectDTO>>(url);
    }
    private async Task detailclass()
    {
        var httpclient = clientFactory.CreateClient("Get");
        var url = $"https://localhost:7039/api/Classes/get-all-class";
        classDTOs = await httpclient.GetFromJsonAsync<List<ClassDTO>>(url);
    }
    private async Task Submit()
    {
        var httpClient = clientFactory.CreateClient("Post");
        var url = $"https://localhost:7039/api/Test/create-test-or-create-testcode";
        var response = await httpClient.PostAsJsonAsync<TestDTO>(url, testDTO);
        if (response.IsSuccessStatusCode)
        {
            await Jsruntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Thành công!",
                text = "Thêm đữ liệu thành công!",
                icon = "success",
                confirmButtonText = "OK"
            });
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
        else
        {
            await Jsruntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Thất bại!",
                text = "Thêm dữ liệu thất bại.",
                icon = "error",
                confirmButtonText = "OK"
            });
        }
    }
    private async Task Delete(Guid id)
    {
        var httpClient = clientFactory.CreateClient("Delete");
        var url = $"https://localhost:7039/api/Test/delete-test?id={id}";
        var res = await httpClient.DeleteAsync(url);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
    private async Task SearchTests()
    {
        var query = new List<string>();
        var queryString = string.Join("&", query);
        var httpClient = clientFactory.CreateClient("Get");
        var url = $"https://localhost:7039/api/Test/get-list-test?{queryString}";
        testList = await httpClient.GetFromJsonAsync<List<TestGridDTO>>(url);
    }
    @code {
        private bool isCreateTestModalVisible = false;
        private bool isQuestionDetailModalVisible = false;

        private void ShowCreateTestModal()
        {
            isCreateTestModalVisible = true;
        }

        private void HideCreateTestModal()
        {
            isCreateTestModalVisible = false;
        }

        private void ShowQuestionDetailModal()
        {
            isQuestionDetailModalVisible = true;
        }

        private void HideQuestionDetailModal()
        {
            isQuestionDetailModalVisible = false;
        }



        //     private void RemoveAnswer(int index)
        //     {
        //         if (index >= 0 && index < testQuestion_TestQuestionAnswersDTO.Answers.Count)
        //         {
        //             testQuestion_TestQuestionAnswersDTO.Answers.RemoveAt(index); // Xóa đáp án
        //         }
        //     }

        // private async Task AddQuestion()
        // {
        //     testQuestion_TestQuestionAnswersDTO.Answers = testQuestion_TestQuestionAnswersDTO.Answers.ToList();
        //     var response = await client.PostAsJsonAsync($"https://localhost:7039/api/TestQuestionDTO/create_question_answer", testQuestion);

        //     if (response.IsSuccessStatusCode)
        //     {
        //         Console.WriteLine("Câu hỏi đã được thêm thành công.");
        //     }
        //     else
        //     {
        //         Console.WriteLine("Đã xảy ra lỗi khi thêm câu hỏi.");
        //     }
        // }
    }

}
<style>
    .row {
        --bs-gutter-x: 0;
    }

    .modal.fade.show {
        display: block;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 1050; /* Đảm bảo modal luôn nằm trên các phần tử khác */
        overflow-y: auto; /* Đảm bảo modal cuộn khi nội dung nhiều */
    }
</style>