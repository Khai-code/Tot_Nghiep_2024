@page "/manage-test"
@using global::Data.DTOs
@layout Teacherlayout
@inject HttpClient client
@inject IHttpClientFactory clientFactory;
@inject NavigationManager NavigationManager
@inject IJSRuntime Jsruntime
<div>
    <div class="row py-2">
        <div class="border d-flex">
            <div class="col-3 p-2">
                <div class="border shadow-sm" style="background-color:cornflowerblue">
                    <h5 class="p-2 text-white d-flex justify-content-center align-items-center">Thư mục</h5>
                </div>
                <div class="border min-vh-100">
                    @if(testList !=null & testList.Any())
                    {
                    @foreach (var item in testList)
                    {
                        <div>
                            <span class="target"  value="@item.Id" type="button" @onclick="() => ToggleTest(item.Id)">
                                <i class="bi bi-folder-fill text-warning p-1"></i> @item.Name
                            </span>
                            <div id="contextMenu" class="context-menu">
                                <div class="context-menu-item" @onclick="ShowCreateTestModal">Thêm mới</div>
                               <div class="context-menu-item" @onclick="()=>Delete(item.Id)">Xóa</div>
                                <div class="context-menu-item" onclick="alert('Mục 3 được chọn!')">Đổi tên</div>
                            </div>
                            @if (selectedTestId == item.Id)
                            {
                                <ul>
                                    <li class="nav-link">
                                        <span type="button" @onclick="() => LoadQuestions(item.Id, 1)">
                                            <i class="bi bi-folder-fill text-warning"></i> Câu hỏi dễ
                                        </span>
                                    </li>
                                    <li class="nav-link">
                                        <span type="button" @onclick="() => LoadQuestions(item.Id, 2)">
                                            <i class="bi bi-folder-fill text-warning"></i> Câu hỏi trung bình
                                        </span>
                                    </li>
                                    <li class="nav-link">
                                        <span type="button" @onclick="() => LoadQuestions(item.Id, 3)">
                                            <i class="bi bi-folder-fill text-warning"></i> Câu hỏi Khó
                                        </span>
                                    </li>
                                    <li class="nav-link">
                                        <span type="button" @onclick="() => LoadQuestions(item.Id, 4)">
                                            <i class="bi bi-folder-fill text-warning"></i> Câu hỏi nâng cao
                                        </span>
                                    </li>
                                </ul>
                            }
                            </div>
                        }
                    }
                    else
                    {
                        <span class="target" type="button" @onclick="ShowCreateTestModal">
                            <i class="bi bi-folder-fill text-warning p-1"></i> 
                        </span>
                    }
                </div>
            </div>
            <div class="col-9 p-2">
                <div class="border shadow-sm d-flex justify-content-between" style="background-color:cornflowerblue">
                    <div class="p-2">
                        <h5 class="text-white">Thông tin chi tiết</h5>
                    </div>
                    <div class="p-2">
                        <span type="button" class="text-white" @onclick="ShowQuestionDetailModals"><i class="bi bi-plus-circle-dotted fw-bold text-white"></i>Tạo câu hỏi</span>
                        <span type="button" class="text-white" @onclick="ShowQuestionDetailModal"><i class="bi bi-file-earmark-excel fw-bold text-white"></i>Nhập file Excel</span>
                        <span type="button" class="text-white" @onclick="DownloadExcelTemplate"><i class="bi bi-arrow-bar-down fw-bold text-white"></i>Tải file mẫu Excel</span>
                    </div>
                    
                </div>
                <div class="border min-vh-50">
                    <table class="table">
                        <thead class="table-primary">
                            <tr>
                                <th scope="col" style="width: 50px;">STT</th>
                                <th scope="col" style="width: 300px;">Nội dung</th>
                                <th scope="col" style="width: 100px;">Thao tác</th>
                            </tr>
                        </thead>
                        @if (selectedQuestions != null && selectedQuestions.Any())
                        {
                            <tbody>
                                @foreach (var question in selectedQuestions)
                                {
                                    <tr>
                                        <td>@(selectedQuestions.IndexOf(question) + 1)</td>
                                        <td >@question.QuestionName</td>
                                        <td >
                                            <span type="button" class="text-warning"><i class="bi bi-pencil"></i></span>
                                            <span type="button" class="text-danger"><i class="bi bi-trash3"></i></span>
                                        </td>
                                    </tr>
                                }
                           </tbody>
                        }
                        
                        else
                        {
                            <tbody>
                                <tr>
                                    <td colspan="2" class="text-center">Chưa có câu hỏi nào được hiển thị.</td>
                                </tr>
                            </tbody>
                        }
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="container-fluid row p-3">
    <div class="modal fade @(isCreateTestModalVisible  ? "show" : "")" tabindex="-1" style="display:@(isCreateTestModalVisible  ? "block" : "none")">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Tạo gói đề</h5>
                    <button type="button" class="btn-close" @onclick="HideCreateTestModal"></button>
                </div>
                <div class="modal-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <label>Tên Đề:</label>
                            <input type="text" class="form-control" @bind=testDTO.Name />
                        </div>
                        <div>
                            <label>Thời Gian</label>
                            <input type="text" class="form-control" @bind=testDTO.Minute />
                        </div>
                        <div>
                            <label>Môn học</label>
                            <select class="form-select" @bind="testDTO.SubjectId">
                                <option value="value">--chọn--</option>
                                @foreach (var item in subjectDTOs)
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            </select>
                        </div>
                        <div>
                            <label>Lớp:</label>
                            <select class="form-select" @bind="testDTO.ClassCode">
                                <option value="value">--chọn--</option>
                                @foreach (var item in classDTOs)
                                {
                                    <option value="@item.Code">@item.Name </option>
                                }
                            </select>
                        </div>
                        <div>
                            <label>Điểm:</label>
                            <select class="form-select" @bind="testDTO.PointTypeId">
                                <option value="value">--chọn--</option>
                                @foreach (var item in pointTypeDTOs)
                                {
                                    <option value="@item.Id">@item.Name </option>
                                }
                            </select>
                        </div>
                    </div>
                    </div>
                    
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="Submit">Lưu</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade @(isQuestionDetailModalVisible ? "show" : "")" tabindex="-1" style="display:@(isQuestionDetailModalVisible ? "block" : "none")">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Thêm câu hỏi</h5>
                    <button type="button" class="btn-close" @onclick="HideQuestionDetailModal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-5 m-1">
                            <label>Chọn File Excel</label>
                            <InputFile OnChange="HandleFileSelected" class="form-control" />
                        </div>
                        <div class="col-5 m-1">
                            <label>Gói đề:</label>
                            <select @bind="testQuestions.TestId" class="form-select">
                                <option value="">--chọn--</option>
                                @foreach (var item in testList)
                                {
                                    <option value="@item.Id">@item.Name</option>
                                }
                            </select>
                        </div>

                    </div>
                </div>
                <div class="modal-footer">
                    <div >
                        <button class="btn btn-primary" @onclick="UploadFile">
                            <i class="bi bi-file-earmark-excel"></i>Tải lên
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal fade @(isQuestionDetailModalVisibles ? "show" : "")" tabindex="-1" style="display:@(isQuestionDetailModalVisibles ? "block" : "none")">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="fw-bold text-primary">Tạo Câu Hỏi</h4>
                    <button type="button" class="btn-close" @onclick="HideQuestionDetailModals"></button>
                </div>
                <div class="modal-body">
                    <div class="container">
                        <div class="row">
                            <div class="col-md-7 p-2">
                                <div class="mb-3">
                                    <label for="questionContent" class="form-label">Nội dung câu hỏi:</label>
                                    <textarea id="questionContent" class="form-control" @bind="testQuestion.QuestionName" placeholder="Nhập nội dung câu hỏi..." rows="3"></textarea>
                                </div>
                                @if (testQuestion.QuestionType == 1 || testQuestion.QuestionType == 2)
                                {
                                    <div class="mb-3">
                                        <label for="answers" class="form-label">Nhập các đáp án:</label>
                                        @foreach (var answer in testQuestion.Answers.Select((value, index) => new { value, index }))
                                        {
                                            <div class="input-group mb-2">
                                                <input type="text" class="form-control"
                                                       value="@answer.value"
                                                       @oninput="(e) => UpdateAnswer(e, answer.index)"
                                                       placeholder="Nhập đáp án" />
                                                @if (testQuestion.QuestionType == 1)
                                                {
                                                    <div class="input-group-text">
                                                        <input type="radio" name="singleAnswer"
                                                               @onchange="() => SetCorrectAnswer(answer.index)" />
                                                    </div>
                                                }
                                                else if (testQuestion.QuestionType == 2)
                                                {
                                                    <div class="input-group-text">
                                                        <input type="checkbox"
                                                               @onchange="(e) => ToggleCorrectAnswer(answer.index, (bool)((ChangeEventArgs)e).Value)"
                                                               checked="@testQuestion.CorrectAnswers.Contains(answer.value)" />
                                                    </div>
                                                }
                                            </div>
                                        }
                                        <button class="btn btn-outline-primary btn-sm mt-2" @onclick="AddAnswerField">+ Thêm đáp án</button>
                                    </div>
                                }

                                @if (testQuestion.QuestionType == 3)
                                {
                                    <div class="mb-3">
                                        <label class="form-label">Chọn đáp án đúng:</label>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="trueFalse" @onchange="() => SetCorrectAnswer(0)" />
                                            <label class="form-check-label">Đúng</label>
                                        </div>
                                        <div class="form-check">
                                            <input class="form-check-input" type="radio" name="trueFalse" @onchange="() => SetCorrectAnswer(1)" />
                                            <label class="form-check-label">Sai</label>
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="col-md-5 p-2">
                                <div class="mb-3">
                                    <label for="questionType" class="form-label">Loại câu hỏi:</label>
                                    <select id="questionType" class="form-select" @onchange="ChangeQuestionType">
                                        <option value="1">Trắc nghiệm chọn 1 đáp án</option>
                                        <option value="2">Trắc nghiệm chọn nhiều đáp án</option>
                                        <option value="3">Đúng sai</option>
                                        <option value="4">Điền vào chỗ trống</option>
                                    </select>
                                </div>

                                <div class="mb-3">
                                    <label for="questionLevel" class="form-label">Mức độ tư duy:</label>
                                    <select id="questionLevel" class="form-select" @bind="testQuestion.Level">
                                        <option value="">--chọn--</option>
                                        <option value="1">Dễ</option>
                                        <option value="2">Trung bình</option>
                                        <option value="3">Khó</option>
                                        <option value="4">Rất khó</option>
                                    </select>
                                </div>

                                <div class="mb-3">
                                    <label for="testPackage" class="form-label">Gói đề:</label>
                                    <select id="testPackage" @bind="testQuestion.TestId" class="form-select">
                                        <option value="" selected>--chọn--</option>
                                        @foreach (var item in testList)
                                        {
                                            <option value="@item.Id">@item.Name</option>
                                        }
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button class="btn btn-success" @onclick="CreateQuestionWithAnswers">Lưu câu hỏi</button>
                    <button class="btn btn-secondary" @onclick="HideQuestionDetailModals">Hủy</button>
                    <span class="text-danger ms-3">@Message</span>
                </div>
            </div>
        </div>
    </div>
</div>
@code {
    private List<listdetailquestion> testQuestionss = new List<listdetailquestion>();
    private TestQuestion_TestQuestionAnswersDTO testQuestions = new TestQuestion_TestQuestionAnswersDTO();
    private List<TestGridDTO> testList = new List<TestGridDTO>();
    private TestQuestionDTO testQuestio = new TestQuestionDTO();
    private GetListTestQueryDTO queryDTO = new GetListTestQueryDTO();
    private List<TestQuestionDTO> testQuestionDTOs = new List<TestQuestionDTO>();
    private List<SubjectDTO> subjectDTOs = new List<SubjectDTO>();
    private List<ClassDTO> classDTOs = new List<ClassDTO>();
    private List<PointTypeDTO> pointTypeDTOs = new List<PointTypeDTO>();
    private TestDTO testDTO = new TestDTO();
    private IBrowserFile selectedFile;
    private string username;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await detailtestGrid();
            await SearchTests();
            await detailclass();
            await detailsubject();
            await detailpoint();

        }
        catch (Exception ex)
        {

        }
    }
    private async Task detailtestGrid()
    {
        var httpClient = clientFactory.CreateClient("Get");
        var url = $"https://localhost:7039/api/Test/get-list-test?";
        testList = await httpClient.GetFromJsonAsync<List<TestGridDTO>>(url);
    }
    private async Task detailpoint()
    {
        var httpclient = clientFactory.CreateClient("Get");
        var url = $"https://localhost:7039/api/PointType/GetAll_pointtype";
        pointTypeDTOs = await httpclient.GetFromJsonAsync<List<PointTypeDTO>>(url);
    }
    private async Task detailsubject()
    {
        var httpclient = clientFactory.CreateClient("Get");
        var url = $"https://localhost:7039/api/Subject/get-all-subject";
        subjectDTOs = await httpclient.GetFromJsonAsync<List<SubjectDTO>>(url);
    }
    private async Task detailclass()
    {
        var httpclient = clientFactory.CreateClient("Get");
        var url = $"https://localhost:7039/api/Classes/get-all-class";
        classDTOs = await httpclient.GetFromJsonAsync<List<ClassDTO>>(url);
    }
    private List<TestQuestion_TestQuestionAnswersDTO> selectedQuestions = new List<TestQuestion_TestQuestionAnswersDTO>(); 

    private async Task LoadQuestions(Guid testId, int level)
    {
        var response = await client.GetAsync($"https://localhost:7039/api/Test/{testId}/questions?level={level}");

        if (response.IsSuccessStatusCode)
        {
            selectedQuestions = await response.Content.ReadFromJsonAsync<List<TestQuestion_TestQuestionAnswersDTO>>();
        }
        else
        {
            selectedQuestions.Clear(); 
        }

        StateHasChanged(); // Cập nhật UI
    }
    private async Task delete(Guid id)
    {
        var httpclient = clientFactory.CreateClient("Delete");
        var url = $"https://localhost:7039/api/TestQuestion/Delete_TestQuestion?Id={id}";
        var responseMessage = await httpclient.DeleteAsync(url);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles(1); // Lấy tệp đầu tiên
        if (file.Count > 0)
        {
            selectedFile = file[0]; // Chọn tệp đầu tiên
        }
    }
    private async Task DownloadExcelTemplate()
    {
        var response = await client.GetAsync("https://localhost:7039/api/TestQuestionDTO/export-template");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsByteArrayAsync();
            var base64String = Convert.ToBase64String(content);
            await Jsruntime.InvokeVoidAsync("downloadFile", "MauCauHoi.xlsx", base64String);
        }
    }
    private async Task UploadFile()
    {
        if (selectedFile != null)
        {
            var stream = selectedFile.OpenReadStream(100 * 1024 * 1024); // Giới hạn 100MB
            var content = new MultipartFormDataContent();

            using (var memoryStream = new MemoryStream())
            {
                await stream.CopyToAsync(memoryStream);
                var fileBytes = memoryStream.ToArray();

                // Thêm tệp vào nội dung gửi
                content.Add(new ByteArrayContent(fileBytes), "file", selectedFile.Name);
            }

            if (testQuestions.TestId != Guid.Empty)
            {
                content.Add(new StringContent(testQuestions.TestId.ToString()), "id");
            }
            else
            {
                await Jsruntime.InvokeVoidAsync("Swal.fire", new
                {
                    title = "Thất bại!",
                    text = "Vui lòng chọn gói đề",
                    icon = "error",
                    confirmButtonText = "OK"
                });
            }

            if (username != null)
            {
                content.Add(new StringContent(username.ToString()), "Createbyname");
            }

            var response = await client.PostAsync($"https://localhost:7039/api/TestQuestionDTO/import_questions?id={testQuestions.TestId}", content);
            if (response.IsSuccessStatusCode)
            {
                await Jsruntime.InvokeVoidAsync("Swal.fire", new
                {
                    title = "Thành công!",
                    text = "Thêm đữ liệu thành công!",
                    icon = "success",
                    confirmButtonText = "OK"
                });
                NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
                await question(testQuestions.TestId);

                await CheckForDuplicates();
            }
            else
            {
                await Jsruntime.InvokeVoidAsync("Swal.fire", new
                {
                    title = "Thất bại!",
                    text = "Đã xảy ra lỗi khi tải lên",
                    icon = "error",
                    confirmButtonText = "OK"
                });
            }
        }
        else
        {
            await Jsruntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Thất bại!",
                text = "Vui lòng chọn một file",
                icon = "error",
                confirmButtonText = "OK"
            });
        }
    }

    private async Task question(Guid id)
    {

        testQuestionss = await client.GetFromJsonAsync<List<listdetailquestion>>($"https://localhost:7039/api/TestQuestion/get-question-details/{id}");
    }

    private async Task CheckForDuplicates()
    {
        var duplicates = testQuestionss.GroupBy(q => q.Questionname)
            .Where(g => g.Count() > 1)
            .SelectMany(g => g)
            .ToList();

        if (duplicates.Any())
        {
             string.Join(", ", duplicates.Select(q => q.Questionname));

            testQuestionss = testQuestionss.Where(q => !duplicates.Contains(q)).ToList();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await Jsruntime.InvokeAsync<string>("localStorage.getItem", "YourSuperSecretKeyHere");
            if (!string.IsNullOrEmpty(token))
            {
                try
                {
                    var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
                    var jsonToken = handler.ReadToken(token) as System.IdentityModel.Tokens.Jwt.JwtSecurityToken;

                    username = jsonToken?.Claims.FirstOrDefault(c => c.Type == "name")?.Value;
                    testQuestion.CreatedByName = username;

                    if (string.IsNullOrEmpty(username))
                    {
                        Console.WriteLine("Không tìm thấy tên người dùng trong token.");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Lỗi khi đọc token: {ex.Message}");
                }
            }
            else
            {
                Console.WriteLine("Không tìm thấy token trong local storage.");
            }
        }
    }
    private async Task Submit()
    {
        var httpClient = clientFactory.CreateClient("Post");
        var url = $"https://localhost:7039/api/Test/create-test-or-create-testcode";
        var response = await httpClient.PostAsJsonAsync<TestDTO>(url, testDTO);
        if (response.IsSuccessStatusCode)
        {
            await Jsruntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Thành công!",
                text = "Thêm đữ liệu thành công!",
                icon = "success",
                confirmButtonText = "OK"
            });
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        }
        else
        {
            await Jsruntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Thất bại!",
                text = "Thêm dữ liệu thất bại.",
                icon = "error",
                confirmButtonText = "OK"
            });
        }
        

    }
    private Guid? selectedTestId = null;

    private void ToggleTest(Guid testId)
    {
        if (selectedTestId == testId)
        {
            // Đóng nếu nhấp lại vào cùng một thư mục
            selectedTestId = null;
        }
        else
        {
            // Mở thư mục được nhấp
            selectedTestId = testId;
        }
    }
    private async Task Delete(Guid id)
    {
        var httpClient = clientFactory.CreateClient("Delete");
        var url = $"https://localhost:7039/api/Test/delete-test?id={id}";
        var res = await httpClient.DeleteAsync(url);
        StateHasChanged();
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);

    }
    private async Task SearchTests()
    {

        var httpClient = clientFactory.CreateClient("Get");
        var url = $"https://localhost:7039/api/Test/get-list-test?";
        testList = await httpClient.GetFromJsonAsync<List<TestGridDTO>>(url);
    }
    @code {
        private bool isCreateTestModalVisible = false;
        private bool isQuestionDetailModalVisible = false;
        private bool isQuestionDetailModalVisibles = false;
        
        private void ShowCreateTestModal()
        {
            isCreateTestModalVisible = true;
        }

        private void HideCreateTestModal()
        {
            isCreateTestModalVisible = false;
        }
        private void ShowQuestionDetailModals()
        {
            isQuestionDetailModalVisibles = true;
        }
        private void ShowQuestionDetailModal()
        {
            isQuestionDetailModalVisible = true;
        }

        private void HideQuestionDetailModal()
        {
            isQuestionDetailModalVisible = false;
        }
        private void HideQuestionDetailModals()
        {
            isQuestionDetailModalVisibles = false;
        }
        
    }
        private void UpdateAnswer(ChangeEventArgs e, int index)
        {
    // Lấy giá trị mới từ ô nhập liệu
    string newAnswer = e.Value?.ToString() ?? string.Empty;

    // Nếu index hợp lệ, cập nhật đáp án
    if (index >= 0 && index < testQuestion.Answers.Count)
    {
        testQuestion.Answers[index] = newAnswer; // Cập nhật giá trị mới vào ô tương ứng
    }

    // Cộng dồn tất cả các đáp án lại thành một chuỗi
    string concatenatedAnswers = string.Join(", ", testQuestion.Answers.Where(ans => !string.IsNullOrWhiteSpace(ans)));

    // Hiển thị hoặc lưu trữ chuỗi đã cộng dồn
    Console.WriteLine(concatenatedAnswers); // Hoặc sử dụng cho mục đích khác
        }




        private TestQuestion_TestQuestionAnswersDTO testQuestion = new TestQuestion_TestQuestionAnswersDTO
        {
            QuestionType = 1,
            Answers = new List<string> { "", "", "", "" },
            CorrectAnswers = new List<string>()
        };

        private void ChangeQuestionType(ChangeEventArgs e)
        {
    int selectedType = int.Parse(e.Value.ToString());
    testQuestion.QuestionType = selectedType;

    switch (selectedType)
    {
        case 1:
        case 2:
            while (testQuestion.Answers.Count < 4)
            {
                testQuestion.Answers.Add(""); // Thêm chuỗi rỗng nếu chưa đủ 4
            }
            break;
        case 3:
            testQuestion.Answers = new List<string> { "True", "False" };
            break;
        case 4:
            testQuestion.Answers.Clear(); // Không cần đáp án cố định
            break;
    }

    testQuestion.CorrectAnswers.Clear(); // Xóa đáp án đúng
    StateHasChanged(); // Đảm bảo giao diện được cập nhật
        }

        private void SetCorrectAnswer(int index)
        {
    if (index >= 0 && index < testQuestion.Answers.Count)
    {
        testQuestion.CorrectAnswers.Clear();
        testQuestion.CorrectAnswers.Add(testQuestion.Answers[index]);
    }
        }

        private void ToggleCorrectAnswer(int index, bool isChecked)
        {
    if (isChecked)
    {
        // Nếu đáp án được chọn, thêm vào danh sách các đáp án đúng
        if (!testQuestion.CorrectAnswers.Contains(testQuestion.Answers[index]))
        {
            testQuestion.CorrectAnswers.Add(testQuestion.Answers[index]);
        }
    }
    else
    {
        // Nếu đáp án không được chọn, loại bỏ khỏi danh sách các đáp án đúng
        if (testQuestion.CorrectAnswers.Contains(testQuestion.Answers[index]))
        {
            testQuestion.CorrectAnswers.Remove(testQuestion.Answers[index]);
        }
    }
        }


        private void AddAnswerField()
        {
    testQuestion.Answers.Add(""); // Thêm đáp án mới vào danh sách
        }
        private string Message;
        private async Task CreateQuestionWithAnswers()
        {
    if (string.IsNullOrWhiteSpace(testQuestion.QuestionName) || testQuestion.QuestionType == null || testQuestion.Answers.Count == 0)
    {
        Message = "Vui lòng điền đầy đủ thông tin câu hỏi và ít nhất một câu trả lời.";
        return;
    }

    // Kiểm tra xem tất cả đáp án đúng có nằm trong danh sách đáp án không
    foreach (var correctAnswer in testQuestion.CorrectAnswers)
    {
        if (!testQuestion.Answers.Contains(correctAnswer))
        {
            Message = "Đáp án đúng phải nằm trong danh sách đáp án.";
            return;
        }
    }

    // Ghi lại thông tin để kiểm tra
    Console.WriteLine($"Đang gửi câu hỏi: {testQuestion.QuestionName} với kiểu: {testQuestion.QuestionType}");

    var response = await client.PostAsJsonAsync("https://localhost:7039/api/TestQuestionDTO/create_question_answwer", testQuestion);
    if (response.IsSuccessStatusCode)
    {
        testQuestion.CreatedByName = username;
        await Jsruntime.InvokeVoidAsync("Swal.fire", new
        {
            title = "Thành công!",
            text = "Câu hỏi đã được lưu thành công!",
            icon = "success",
            confirmButtonText = "OK"
        });
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
        testQuestion = new TestQuestion_TestQuestionAnswersDTO();
        testQuestion.Answers = new List<string>();
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
    else
    {
        var errorMessage = await response.Content.ReadAsStringAsync();
        Message = $"Đã xảy ra lỗi khi tạo câu hỏi: {errorMessage}. Mã trạng thái: {response.StatusCode}";
        Console.WriteLine(Message); // Ghi lại thông báo lỗi
    }
        }
}

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script>
    $(document).on('contextmenu', '.target', function (e) {
        e.preventDefault(); 
        $('.context-menu').hide();
        $(this).siblings('.context-menu').css({
            display: 'block',
            left: e.pageX,
            top: e.pageY
        });
    });
    $(document).on('click', function () {
        $('.context-menu').hide();
    });
    function downloadFile(fileName, base64String) {
        const link = document.createElement('a');
        link.href = 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,' + base64String;
        link.download = fileName;
        link.click();
    }
</script>
