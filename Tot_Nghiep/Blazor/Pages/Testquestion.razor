@page "/create-question"
@using global::Data.DTOs
@layout Teacherlayout
@inject HttpClient Http
@inject IJSRuntime jsruntime
@inject NavigationManager navigate
<PageTitle>question</PageTitle>
@using System.Net.Http.Json
<div class="container">
    <div class="mt-3  bg-white rounded-3 d-flex justify-content-end ">
        <button class="btn btn-primary"><i class="bi bi-file-earmark-excel"></i>Nhập excel</button>
        <button class="btn btn-warning"><i class="bi bi-play"></i>Sinh đề</button>
    </div>
    <div class="row pt-4">
        <!-- Cột bên trái -->
        <div class="col-lg-6 mb-3">
            <div class="mb-3">
                <label>Câu hỏi:</label>
                <input type="text" @bind="testQuestionDTO.QuestionName" class="form-control" placeholder="Nhập câu hỏi" />
            </div>
            <div class="mb-3">
                <label>Mức độ tư duy:</label>
                <select @bind="testQuestionDTO.Type" class="form-control">
                    <option value="0">Dễ</option>
                    <option value="1">Trung bình</option>
                    <option value="2">Khó</option>
                </select>
            </div>

            <div class="mb-3">
                <label>Gói đề:</label>
                <select @bind="testQuestionDTO.TestCodeId" class="form-control">
                    <option >--chọn gói đề--</option>
                    @foreach (var a in testcode)
                    {
                        <option value="@a.Id">@a.Name</option>
                    }
                </select>
            </div>
            <button class="btn btn-primary" @onclick="CreateQuestionWithAnswers">Lưu</button>
            <button type="button" class="btn btn-secondary" @onclick="AddAnswer">Thêm câu trả lời</button>
        </div>

        <!-- Cột bên phải -->
        <div class="col-lg-6 mb-3" style="padding-left:50px">
            <label>Câu trả lời:</label>
            <div class="">
                @for (int i = 0; i < Math.Max(4, testQuestionDTO.Answers.Count); i++)
                {
                    var currentAnswer = (i < testQuestionDTO.Answers.Count) ? testQuestionDTO.Answers[i] : new AnswerDTO();

                    <div class="d-flex align-items-center mb-3">
                        <!-- Input trả lời -->
                        <input type="text" @bind="currentAnswer.Answer" class="form-control w-75 me-2" placeholder="Nhập câu trả lời" />
                        <!-- Nút chọn câu đúng -->
                        <input type="radio" name="RightAnswer" class="me-2" @onclick="() => SetRightAnswer(currentAnswer.Answer)" checked="@IsRightAnswer(currentAnswer.Answer)" />
                        <!-- Nút xóa -->
                        <span type="button" class="text-danger" @onclick="() => RemoveAnswer(currentAnswer)">
                            <i class="bi bi-trash3"></i>
                        </span>
                       
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="row">
        <div class="table-responsive">
            <table class="table table-bordered text-center">
                <thead class="table-light">
                    <tr>
                        <th scope="col">STT</th>
                        <th scope="col">Mã Đề</th>
                        <th scope="col">Gói đề</th>
                        <th scope="col">Môn</th>
                        <th scope="col">Khối</th>
                        <th scope="col">Số lượng câu hỏi</th>
                        <th scope="col">Người tạo</th>
                        
                    </tr>
                </thead>
                <tbody>
                    @foreach(var a in listQuestionDTOs)
                    {
                        <tr>
                            <th scope="row">@(listQuestionDTOs.IndexOf(a)+1)</th>
                            <th>@a.code</th>
                            <td>@a.nametest</td>
                            <td>@a.name</td>
                            <td>khối @a.namegrade</td>
                            <td>@a.totalquestion</td>
                            <td>@a.usermane</td>
                        </tr>
                        
                    }
                   
                </tbody>
            </table>
        </div>
    </div>
</div>



@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert alert-info mt-3">@Message</div>
}

@code {
    private TestQuestionDTO testQuestionDTO = new TestQuestionDTO();
    private string Message;
    private AnswerDTO answerDTO = new AnswerDTO();
    private List<TesCodeDTO> testcode = new List<TesCodeDTO>();
    private List<ListQuestionDTO> listQuestionDTOs = new List<ListQuestionDTO>();
    private string username;
    protected override async Task OnInitializedAsync()
    {
        testQuestionDTO.Answers = new List<AnswerDTO>();
        for (int i = 0; i < 4; i++)
        {
            testQuestionDTO.Answers.Add(new AnswerDTO());
        }
        testcode = await Http.GetFromJsonAsync<List<TesCodeDTO>>("api/TestQuestion/GetAll_TestQuestion");
        listQuestionDTOs = await Http.GetFromJsonAsync<List<ListQuestionDTO>>("https://localhost:7039/api/TestQuestion/GetAll_Question");
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var token = await jsruntime.InvokeAsync<string>("localStorage.getItem", "YourSuperSecretKeyHere");

        if (firstRender)
        {
            try
            {
                var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
                var jsonToken = handler.ReadToken(token) as System.IdentityModel.Tokens.Jwt.JwtSecurityToken;
                var userName = jsonToken?.Claims.FirstOrDefault(c => c.Type == "name")?.Value;
                if (!string.IsNullOrEmpty(userName))
                {
                    testQuestionDTO.CreatedByName = userName;
                }
                else
                {
                    Console.WriteLine("Không tìm thấy tên người dùng trong token.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Lỗi khi đọc token: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("Không tìm thấy token trong local storage.");
        }
    }


    private void AddAnswer()
    {
        testQuestionDTO.Answers.Add(new AnswerDTO());
    }

    private void RemoveAnswer(AnswerDTO answer)
    {
        testQuestionDTO.Answers.Remove(answer);
    }

    private void SetRightAnswer(string answer)
    {
        testQuestionDTO.RightAnswer = answer;
    }

    private bool IsRightAnswer(string answer)
    {
        return testQuestionDTO.RightAnswer == answer;
    }
    private async Task delete(Guid Id)
    {
        var response = await Http.DeleteAsync($"https://localhost:7039/api/TestQuestion/Delete_TestQuestion?Id={Id}");
        if (response.IsSuccessStatusCode)
        {
            await jsruntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Thành công!",
                text = "Xóa đữ liệu thành công!",
                icon = "success",
                confirmButtonText = "OK"
            });
            navigate.NavigateTo(navigate.Uri, forceLoad: true);
        }
        else
        {
            await jsruntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Thất bại!",
                text = "Xóa dữ liệu thất bại.",
                icon = "error",
                confirmButtonText = "OK"
            });
            navigate.NavigateTo(navigate.Uri, forceLoad: true);
        }
    }
    private async Task CreateQuestionWithAnswers()
    {
        if (string.IsNullOrWhiteSpace(testQuestionDTO.QuestionName) ||
            testQuestionDTO.Type == null ||
            testQuestionDTO.Answers.Count == 0)
        {
            Message = "Vui lòng điền đầy đủ thông tin câu hỏi và ít nhất một câu trả lời.";
            return;
        }

        var response = await Http.PostAsJsonAsync("https://localhost:7039/api/TestQuestion/CreateQuestionWithAnswers", testQuestionDTO);
        if (response.IsSuccessStatusCode)
        {
            testQuestionDTO.CreatedByName = username;
            Message = "Question and answers created successfully!";
            testQuestionDTO = new TestQuestionDTO();
            testQuestionDTO.Answers = new List<AnswerDTO>(); 
            navigate.NavigateTo(navigate.Uri, forceLoad: true);
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Message = $"Error creating question and answers: {errorMessage}";
        }
    }
}
