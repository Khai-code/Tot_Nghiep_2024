@page "/add-question"
@using global::Data.DTOs
@layout Teacherlayout
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@inject IJSRuntime jsruntime
@inject NavigationManager navigate
@* <div class="container">
    <div class="row py-2">
        <div class="fs-3 fw-bold text-info">
            <span type="button">chọn loại câu hỏi</span>
        </div>
    </div>
    <div class="row py-3">
        <div class="col-3">
            <button type="button" class="btn" @onclick="() => SelectQuestionType(1)">
                <div class="quiz-container">
                    <div class="quiz-title">Trắc nghiệm chọn 1 đáp án</div>
                    <div class="d-flex justify-content-center">
                        <img src="/img/1.svg" alt="Alternate Text" />
                    </div>
                </div>
            </button>
        </div>
        <div class="col-3">
            <button type="button" class="btn" @onclick="() => SelectQuestionType(2)">
                <div class="quiz-container">
                    <div class="quiz-title">Trắc nghiệm chọn nhiều đáp án</div>
                    <div class="d-flex justify-content-center">
                        <img src="/img/2.svg" alt="Alternate Text" />
                    </div>
                </div>
            </button>
        </div>
        <div class="col-3">
            <button type="button" class="btn" @onclick="() => SelectQuestionType(3)">
                <div class="quiz-container">
                    <div class="quiz-title">Đúng sai</div>
                    <div class="d-flex justify-content-center">
                        <img src="/img/7.svg" alt="Alternate Text" />
                    </div>
                </div>
            </button>

        </div>

    </div>

</div>


@code {
    private int SelectQuestionType;
    private TestQuestion_TestQuestionAnswersDTO testQuestion_TestQuestionAnswersDTO = new TestQuestion_TestQuestionAnswersDTO();

    private void SelectQuestionType(int questionType)
    {
        SelectQuestionType = questionType;
        testQuestion_TestQuestionAnswersDTO.QuestionType = questionType;
    }

} *@


<div class="container mt-5">
    <h3>Thêm Câu Hỏi</h3>
    <div class="mb-3">
        <label>Loại câu hỏi:</label>
        <select class="form-select" @onchange="ChangeQuestionType" >
            <option value="1">Trắc nghiệm chọn 1 đáp án</option>
            <option value="2">Trắc nghiệm chọn nhiều đáp án</option>
            <option value="3">Đúng sai</option>
            <option value="4">Điền vào chỗ trống</option>
        </select>
    </div>
    <div >
        <label>Độ khó:</label>
        <select class="form-select" @bind="testQuestion.Level">
            <option value="">--chọn--</option>
            <option value="1">Dễ</option>
            <option value="2">Trung bình</option>
            <option value="3">Khó</option>
            <option value="4">Rất khó</option>
        </select>
    </div>
    <div>
        <label>testId:</label>
        <select @bind="testQuestion.TestId" class="form-select">
            <option selected>--chọn--</option>
            @foreach (var item in testList)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </select>
    </div>
    <div class="mb-3">
        <label>Nội dung câu hỏi:</label>
        <textarea class="form-control" @bind="testQuestion.QuestionName" placeholder="Nhập nội dung câu hỏi..."></textarea>
    </div>

    @if (testQuestion.QuestionType == 1 || testQuestion.QuestionType == 2)
    {
        <div>
            <label>Nhập các đáp án:</label>
            @foreach (var answer in testQuestion.Answers.Select((value, index) => new { value, index }))
            {
                <div class="input-group mb-2">
                    <input type="text"
                           value="@answer.value"
                           @oninput="(e) => UpdateAnswer(e, answer.index)"
                           placeholder="Nhập đáp án" />

                    @if (testQuestion.QuestionType == 1)
                    {
                        <div class="input-group-text">
                            <input type="radio" name="singleAnswer"
                                   @onchange="() => SetCorrectAnswer(answer.index)" />
                        </div>
                    }
                    else if (testQuestion.QuestionType == 2) // Kiểu câu hỏi nhiều lựa chọn
                    {
                        <div class="input-group-text">
                            <input type="checkbox"
                                   @onchange="(e) => ToggleCorrectAnswer(answer.index, (bool)((ChangeEventArgs)e).Value)"
                                   checked="@testQuestion.CorrectAnswers.Contains(answer.value)" /> <!-- Đánh dấu checkbox nếu đáp án là đúng -->
                        </div>
                    }
                </div>
            }

            <button class="btn btn-outline-primary" @onclick="AddAnswerField">Thêm đáp án</button>
        </div>
    }

    @if (testQuestion.QuestionType == 3)
    {
        <div class="mt-3">
            <label>Chọn đáp án đúng:</label>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="trueFalse" @onchange="() => SetCorrectAnswer(0)" />
                <label class="form-check-label">Đúng</label>
            </div>
            <div class="form-check">
                <input class="form-check-input" type="radio" name="trueFalse" @onchange="() => SetCorrectAnswer(1)" />
                <label class="form-check-label">Sai</label>
            </div>
        </div>
    }

    <button class="btn btn-success mt-4" @onclick="CreateQuestionWithAnswers">Lưu câu hỏi</button>
</div>
<h4>@Message</h4>
@code {
    private List<TestGridDTO> testList = new List<TestGridDTO>();
    protected override async Task OnInitializedAsync()
    {

        await SearchTests();
      

    }
    private string username;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var token = await jsruntime.InvokeAsync<string>("localStorage.getItem", "YourSuperSecretKeyHere");

        if (firstRender)
        {
            try
            {
                var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
                var jsonToken = handler.ReadToken(token) as System.IdentityModel.Tokens.Jwt.JwtSecurityToken;
                var userName = jsonToken?.Claims.FirstOrDefault(c => c.Type == "name")?.Value;
                if (!string.IsNullOrEmpty(userName))
                {
                    testQuestion.CreatedByName = userName;
                }
                else
                {
                    Console.WriteLine("Không tìm thấy tên người dùng trong token.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Lỗi khi đọc token: {ex.Message}");
            }
        }
        else
        {
            Console.WriteLine("Không tìm thấy token trong local storage.");
        }
    }
    private async Task SearchTests()
    {
        
        var httpClient = ClientFactory.CreateClient("Get");
        var url = $"https://localhost:7039/api/Test/get-list-test?";
        testList = await httpClient.GetFromJsonAsync<List<TestGridDTO>>(url);
    }
   
    private void UpdateAnswer(ChangeEventArgs e, int index)
{
    // Lấy giá trị mới từ ô nhập liệu
    string newAnswer = e.Value?.ToString() ?? string.Empty;

    // Nếu index hợp lệ, cập nhật đáp án
    if (index >= 0 && index < testQuestion.Answers.Count)
    {
        testQuestion.Answers[index] = newAnswer; // Cập nhật giá trị mới vào ô tương ứng
    }

    // Cộng dồn tất cả các đáp án lại thành một chuỗi
    string concatenatedAnswers = string.Join(", ", testQuestion.Answers.Where(ans => !string.IsNullOrWhiteSpace(ans)));

    // Hiển thị hoặc lưu trữ chuỗi đã cộng dồn
    Console.WriteLine(concatenatedAnswers); // Hoặc sử dụng cho mục đích khác
}




    private TestQuestion_TestQuestionAnswersDTO testQuestion = new TestQuestion_TestQuestionAnswersDTO
        {
            QuestionType = 1,
            Answers = new List<string> { "", "", "", "" },
            CorrectAnswers = new List<string>()
        };

    private void ChangeQuestionType(ChangeEventArgs e)
    {
        int selectedType = int.Parse(e.Value.ToString());
        testQuestion.QuestionType = selectedType;

        switch (selectedType)
        {
            case 1:
            case 2:
                while (testQuestion.Answers.Count < 4)
                {
                    testQuestion.Answers.Add(""); // Thêm chuỗi rỗng nếu chưa đủ 4
                }
                break;
            case 3:
                testQuestion.Answers = new List<string> { "True", "False" };
                break;
            case 4:
                testQuestion.Answers.Clear(); // Không cần đáp án cố định
                break;
        }

        testQuestion.CorrectAnswers.Clear(); // Xóa đáp án đúng
        StateHasChanged(); // Đảm bảo giao diện được cập nhật
    }

    private void SetCorrectAnswer(int index)
    {
        if (index >= 0 && index < testQuestion.Answers.Count)
        {
            testQuestion.CorrectAnswers.Clear();
            testQuestion.CorrectAnswers.Add(testQuestion.Answers[index]);
        }
    }

    private void ToggleCorrectAnswer(int index, bool isChecked)
    {
        if (isChecked)
        {
            // Nếu đáp án được chọn, thêm vào danh sách các đáp án đúng
            if (!testQuestion.CorrectAnswers.Contains(testQuestion.Answers[index]))
            {
                testQuestion.CorrectAnswers.Add(testQuestion.Answers[index]);
            }
        }
        else
        {
            // Nếu đáp án không được chọn, loại bỏ khỏi danh sách các đáp án đúng
            if (testQuestion.CorrectAnswers.Contains(testQuestion.Answers[index]))
            {
                testQuestion.CorrectAnswers.Remove(testQuestion.Answers[index]);
            }
        }
    }


    private void AddAnswerField()
    {
        testQuestion.Answers.Add(""); // Thêm đáp án mới vào danh sách
    }
    private string Message;
    private async Task CreateQuestionWithAnswers()
    {
        if (string.IsNullOrWhiteSpace(testQuestion.QuestionName) || testQuestion.QuestionType == null || testQuestion.Answers.Count == 0)
        {
            Message = "Vui lòng điền đầy đủ thông tin câu hỏi và ít nhất một câu trả lời.";
            return;
        }

        // Kiểm tra xem tất cả đáp án đúng có nằm trong danh sách đáp án không
        foreach (var correctAnswer in testQuestion.CorrectAnswers)
        {
            if (!testQuestion.Answers.Contains(correctAnswer))
            {
                Message = "Đáp án đúng phải nằm trong danh sách đáp án.";
                return;
            }
        }

        // Ghi lại thông tin để kiểm tra
        Console.WriteLine($"Đang gửi câu hỏi: {testQuestion.QuestionName} với kiểu: {testQuestion.QuestionType}");

        var response = await Http.PostAsJsonAsync("https://localhost:7039/api/TestQuestionDTO/create_question_answwer", testQuestion);
        if (response.IsSuccessStatusCode)
        {
            testQuestion.CreatedByName = username;
            await jsruntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Thành công!",
                text = "Câu hỏi đã được lưu thành công!",
                icon = "success",
                confirmButtonText = "OK"
            });
            navigate.NavigateTo(navigate.Uri, forceLoad: true);
            testQuestion = new TestQuestion_TestQuestionAnswersDTO();
            testQuestion.Answers = new List<string>();
            navigate.NavigateTo(navigate.Uri, forceLoad: true);
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Message = $"Đã xảy ra lỗi khi tạo câu hỏi: {errorMessage}. Mã trạng thái: {response.StatusCode}";
            Console.WriteLine(Message); // Ghi lại thông báo lỗi
        }
    }



    
}