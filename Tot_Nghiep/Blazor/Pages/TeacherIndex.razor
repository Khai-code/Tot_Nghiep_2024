@page "/teacherindex"
@using Database.DTOs
@using global::Data.DTOs
@using global::Data.Model
@layout Teacherlayout
@inject IHttpClientFactory clientFactory;
@inject HttpClient client
@inject IJSRuntime jsRuntime
@inject NavigationManager nav

<h3 class="text-center my-4">Thống kê biểu đồ</h3>
<div class="chart-container">
    <div class="chart-wrapper">
        <canvas id="studentsPieChart"></canvas>
    </div>
    <div class="chart-wrapper">
        <canvas id="classesPieChart"></canvas>
    </div>
    <div class="chart-wrapper">
        <canvas id="teachersPieChart"></canvas>
    </div>
</div>
@code {
    private List<GradeDTO> gradeData = new List<GradeDTO>();
    private bool isDataLoaded = false;
    private int totalClasses = 0;
    private int totalTeachers = 0;

    protected override async Task OnInitializedAsync()
    {
        // Thay đổi URL cho phù hợp với API của bạn
        gradeData = await client.GetFromJsonAsync<List<GradeDTO>>("api/Grade/get-grade-data");
        // Lấy dữ liệu tổng số lượng lớp và giáo viên từ đối tượng đầu tiên
        if (gradeData.Any())
        {
            totalClasses = gradeData.First().TotalClasses;
            totalTeachers = gradeData.First().TotalTeachers;
        }
        isDataLoaded = true; // Đánh dấu dữ liệu đã được tải
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isDataLoaded)
        {
            // Vẽ biểu đồ học sinh theo khối
            await jsRuntime.InvokeVoidAsync("drawPieChart",
                "studentsPieChart",
                gradeData.Select(d => d.Name).ToArray(),
                gradeData.Select(d => d.TotalStudents).ToArray(), "Thống kê số lượng học sinh theo khối");

            // Vẽ biểu đồ số lượng lớp
            await jsRuntime.InvokeVoidAsync("drawSingleValuePieChart",
                "classesPieChart",
                "Tổng số lớp",
                totalClasses,
                "Thống kê số lượng lớp trong hệ thống");

            // Vẽ biểu đồ số lượng giáo viên
            await jsRuntime.InvokeVoidAsync("drawSingleValuePieChart",
                "teachersPieChart",
                "Tổng số giáo viên",
                totalTeachers,
                "Thống kê số lượng giáo viên trong hệ thống");
        }
    }

    // public class PieChartData
    // {
    //     public string Label { get; set; }
    //     public int Value { get; set; }
    // }
}
<script>
    window.drawPieChart = (canvasId, labels, data, title) => {
        var ctx = document.getElementById(canvasId).getContext('2d');
        var myPieChart = new Chart(ctx, {
            type: 'pie',
            data: {

                datasets: [{
                    data: data,
                    backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0'],
                    hoverBackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0']
                }],
                labels: labels,
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: title
                }
            }
        });
    };

    // Hàm vẽ biểu đồ một giá trị (dùng cho số lượng lớp và giáo viên)
    window.drawSingleValuePieChart = (canvasId, label, value, title) => {
        var ctx = document.getElementById(canvasId).getContext('2d');
        var myPieChart = new Chart(ctx, {
            type: 'pie',
            data: {
                datasets: [{
                    data: [value, 100 - value], // Biểu đồ tròn với giá trị và phần còn lại
                    backgroundColor: ['#FF6384', '#E0E0E0'], // Màu chính và màu nền còn lại
                    hoverBackgroundColor: ['#FF6384', '#E0E0E0']
                }],
                labels: [label, 'Khác'],
            },
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: title
                }
            }
        });
    };


</script>

<div class="row mt-5">
    <div class="col-md-7 border p-4">
        <blockquote class="custom-teacherindex">
            "Thêm cái gì ở đây bây giờ cho xin ý kiến"
            <span class="quote-source">— Nguyễn Đức Công</span>
        </blockquote>
    </div>
    <div class="col-md-1"></div>
    <div class="col-md-4 border p-4">
        <h2 class="text-center mb-4">Bảng thông báo</h2>
        <button class="btn btn-primary mb-3 w-100" @onclick="ShowCreateNoticeModal">Tạo Thông Báo</button>
        <div class="notification-list-container">
            @if (notifications != null && notifications.Count > 0)
            {
                @foreach (var notification in notifications)
                {
                    <div class="card notification-card mb-2">
                        <div class="card-body">
                            <h6 class="card-title">
                                <a @onclick="() => Detail(notification.Id)" class="notification-title">
                                    <i class="bi bi-info-circle-fill text-primary"></i>
                                    @notification.Title
                                </a>
                            </h6>
                            <p class="card-text text-muted small">
                                Ngày tạo: @notification.CreationTime.ToString("dd/MM/yyyy HH:mm")
                            </p>
                        </div>
                    </div>
                }
            }
            else
            {
                <p class="text-center">Không có thông báo nào.</p>
            }
        </div>
    </div>
</div>

<div class="modal fade @(isCreateNoticeModalVisible ? "show" : "")" tabindex="-1" style="display:@(isCreateNoticeModalVisible ? "block" : "none")">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title">Tạo Thông Báo</h5>
                <button type="button" class="btn-close" @onclick="HideCreateNoticeModal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="title" class="form-label">Tiêu đề thông báo:</label>
                    <input type="text" id="title" class="form-control" @bind="notificationDTO.Title" placeholder="Nhập tiêu đề" />
                </div>
                <div class="mb-3">
                    <label for="content" class="form-label">Nội dung thông báo:</label>
                    <textarea id="content" class="form-control" @bind="notificationDTO.Content" placeholder="Nhập nội dung"></textarea>
                </div>
                <div class="mb-3">
                    <label for="creationTime" class="form-label">Thời gian tạo thông báo:</label>
                    <input type="datetime-local" id="creationTime" class="form-control" @bind="notificationDTO.CreationTime" />
                </div>
                <div class="mb-3">
                    <label for="status" class="form-label">Trạng thái:</label>
                    <input type="text" id="status" class="form-control" @bind="notificationDTO.Status" placeholder="Nhập trạng thái" />
                </div>
                <div class="mb-3">
                    <label for="type" class="form-label">Loại thông báo:</label>
                    <select id="type" class="form-control" @bind="notificationDTO.type">
                        <option value="0">Thông báo cho tất cả</option>
                        <option value="1">Thông báo cho 1 hoặc nhiều lớp nhất định</option>
                    </select>
                </div>

                @if (notificationDTO.type == 1)
                {
                    <div class="mt-3">
                        <button type="button" class="btn btn-primary" @onclick="ShowClassSelectionModal">Chọn lớp</button>

                        <div class="mt-3">
                            <label>Các lớp đã chọn:</label>
                            <ul class="list-group">
                                @foreach (var className in selectedClassNames)
                                {
                                    <li class="list-group-item">@className</li>
                                }
                            </ul>
                        </div>
                    </div>
                }

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideCreateNoticeModal">Đóng</button>
                <button type="button" class="btn btn-primary" @onclick="SubmitNotice">Lưu Thông Báo</button>
            </div>
        </div>
    </div>
</div>

<style>
    .modal-header {
        background-color: #007bff;
        color: white;
        border-bottom: 1px solid #e5e5e5;
    }

    .modal-title {
        font-weight: bold;
        font-size: 1.25rem;
    }

    .modal-footer {
        background-color: #f1f1f1;
        border-top: 1px solid #e5e5e5;
    }

    .btn-close {
        background-color: transparent;
        border: none;
        font-size: 1.25rem;
    }

    .form-label {
        font-weight: bold;
    }

    .list-group-item {
        font-size: 0.9rem;
        padding: 5px 10px;
    }
</style>


<!-- Modal chọn lớp -->
@if (isClassSelectionModalVisible)
{
    <div class="modal fade show" tabindex="-1" style="display:block;">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Chọn các lớp</h5>
                    <button type="button" class="btn-close" @onclick="HideClassSelectionModal"></button>
                </div>
                <div class="modal-body">
                    <div class="mt-3">
                        <label>Chọn lớp:</label>
                        <select multiple class="form-control" @onchange="HandleClassSelection">
                            @foreach (var item in classList)
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideClassSelectionModal">Lưu lớp đã chọn</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isCreateNoticeModalVisible = false;
    private bool isClassSelectionModalVisible = false; // Biến điều khiển hiển thị modal chọn lớp
    private List<NotificationDTO>? notifications = new List<NotificationDTO>();
    private NotificationDTO notificationDTO = new NotificationDTO();
    private List<ClassDTO> classList = new List<ClassDTO>(); // Danh sách các lớp học
    private List<Guid> selectedClassIds = new List<Guid>(); // Danh sách ID lớp được chọn (nếu Type == 1)
    private List<string> selectedClassNames = new List<string>(); // Danh sách tên các lớp đã chọn
    private string currentDateTime = DateTime.Now.ToString("yyyy-MM-ddTHH:mm"); // Định dạng cho <input type="datetime-local">


    protected override async void OnInitialized()
    {
        LoadNotifications();
        LoadClasses();

        // // Thiết lập thời gian tạo thông báo mặc định là thời gian hiện tại
        // notificationDTO.CreationTime = DateTime.Now.ToString("yyyy-MM-ddTHH:mm");
    }
    public async void Detail(Guid Id)
    {
        nav.NavigateTo($"/notification-detail/{Id}");
    }
    private async Task LoadClasses()
    {
        // Giả sử bạn đã có API hoặc dịch vụ để lấy danh sách lớp từ database
        var httpClient = clientFactory.CreateClient("Get");
        var url = "https://localhost:7039/api/Classes/get-all-class";
        classList = await httpClient.GetFromJsonAsync<List<ClassDTO>>(url);
    }
    // Hàm tải danh sách thông báo
    private async Task LoadNotifications()
    {
        var httpClient = clientFactory.CreateClient("Get");
        var url = "https://localhost:7039/api/Notification/get-all-notification";
        notifications = await httpClient.GetFromJsonAsync<List<NotificationDTO>>(url);
    }
    private void HandleNotificationTypeChange(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        var selectedValue = e.Value?.ToString();

        if (int.TryParse(selectedValue, out int type))
        {
            notificationDTO.type = type;
        }

        // Kiểm tra nếu người dùng chọn "1" (Thông báo cho một hoặc một số lớp nhất định)
        if (notificationDTO.type == 1)
        {
            ShowClassSelectionModal(); // Mở modal để chọn lớp
        }
        else
        {
            HideClassSelectionModal(); // Đóng modal nếu là thông báo cho tất cả
            selectedClassIds.Clear(); // Xóa danh sách lớp đã chọn
        }
    }

    // Xử lý khi người dùng chọn lớp
    private void HandleClassSelection(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        var selectedOptions = e.Value as IEnumerable<string>;
        selectedClassIds = selectedOptions.Select(id => Guid.Parse(id)).ToList();

        // Lấy tên các lớp đã chọn
        selectedClassNames = classList
            .Where(c => selectedClassIds.Contains(c.Id))
            .Select(c => c.Name)
            .ToList();
    }
    private void ShowCreateNoticeModal()
    {
        // Đặt thời gian hiện tại làm giá trị mặc định khi mở modal
        notificationDTO.CreationTime = DateTime.Now; // Gán ngày giờ hiện tại cho DTO
        isCreateNoticeModalVisible = true;
    }

    private async Task SubmitNotice()
    {
        // Kiểm tra nếu người dùng chọn thông báo cho lớp nhưng chưa chọn lớp nào
        if (notificationDTO.type == 1 && !selectedClassIds.Any())
        {
            await jsRuntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Lỗi",
                text = "Vui lòng chọn ít nhất một lớp để gửi thông báo!",
                icon = "error",
                confirmButtonText = "OK"
            });
            return;
        }

        // Gán danh sách ClassIds vào DTO trước khi gửi API chỉ khi type == 1
        if (notificationDTO.type == 1)
        {
            notificationDTO.ClassIds = selectedClassIds;
        }
        else
        {
            notificationDTO.ClassIds = null; // Xóa dữ liệu ClassIds khi gửi thông báo cho tất cả
        }

        // Gửi thông báo qua API
        var httpClient = clientFactory.CreateClient();
        var url = $"https://localhost:7039/api/Notification/create-notification";
        var response = await httpClient.PostAsJsonAsync(url, notificationDTO);

        if (response.IsSuccessStatusCode)
        {
            await jsRuntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Thành công!",
                text = "Thông báo đã được gửi thành công!",
                icon = "success",
                confirmButtonText = "OK"
            });

            HideCreateNoticeModal();

            // Tải lại danh sách thông báo sau khi thêm
            await LoadNotifications();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            await jsRuntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Thất bại!",
                text = $"Gửi thông báo thất bại: {errorMessage}",
                icon = "error",
                confirmButtonText = "OK"
            });
        }
    }




    private void HideCreateNoticeModal()
    {
        isCreateNoticeModalVisible = false;
    }
    private void HandleClassSelection(Guid classId, bool isChecked)
    {
        if (isChecked)
        {
            selectedClassIds.Add(classId);
        }
        else
        {
            selectedClassIds.Remove(classId);
        }
    }
    private void ShowClassSelectionModal()
    {
        isClassSelectionModalVisible = true;
    }

    private void HideClassSelectionModal()
    {
        isClassSelectionModalVisible = false;
    }
}

<style>
    .chart-container {
        display: flex;
        justify-content: space-around;
        flex-wrap: wrap;
        gap: 20px; /* Khoảng cách giữa các biểu đồ */
        padding: 20px;
    }

    .chart-wrapper {
        width: 300px;
        height: 300px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
        padding: 20px;
        background-color: #f9f9f9;
    }

    blockquote.custom-teacherindex {
        background-color: #f1f1f1;
        padding: 20px;
        border-left: 5px solid #007bff;
        font-size: 1.2rem;
        margin: 0;
        color: #555;
    }

    .custom-teacherindex .quote-source {
        display: block;
        text-align: right;
        color: #007bff;
        font-style: italic;
    }

    .notification-title {
        text-decoration: none;
        color: #007bff;
        font-weight: bold;
        transition: color 0.3s;
    }

        .notification-title:hover {
            color: #0056b3;
        }

    .notification-card {
        transition: box-shadow 0.3s ease;
        border: none;
        background-color: #fff;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

        .notification-card:hover {
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
        }

    .modal-header, .modal-footer {
        background-color: #f8f9fa;
        border: none;
    }

    button.btn-close {
        font-size: 1.2rem;
    }

    textarea.form-control, input.form-control {
        border-radius: 5px;
        box-shadow: none;
    }

    h2.text-center {
        font-weight: bold;
        font-size: 1.75rem;
        color: #333;
        margin-bottom: 30px;
    }

    .table-fixed {
        max-height: 250px;
        overflow-y: auto;
    }

        .table-fixed thead {
            background-color: #007bff;
            color: white;
        }
</style>

<style>
    .notification-title {
        text-decoration: none; /* Bỏ gạch chân mặc định */
        color: #007bff; /* Màu mặc định của liên kết */
        font-weight: normal;
        cursor: pointer;
    }

        .notification-title:hover {
            color: #004080; /* Màu khi hover đậm hơn */
            font-weight: bold; /* Tăng độ đậm khi hover */
        }


    .notification-card {
        transition: box-shadow 0.2s ease;
        font-size: 0.9rem;
    }

        .notification-card:hover {
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

    .card-body {
        padding: 10px; /* Giảm padding của card */
    }

    .mb-2 {
        margin-bottom: 0.5rem !important; /* Giảm khoảng cách giữa các card */
    }

    h2.text-center {
        margin-bottom: 15px; /* Giảm khoảng cách giữa tiêu đề và danh sách */
        font-weight: bold;
        font-size: 1.5rem; /* Giảm kích thước tiêu đề */
    }

    .shadow-sm {
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.15);
    }
</style>