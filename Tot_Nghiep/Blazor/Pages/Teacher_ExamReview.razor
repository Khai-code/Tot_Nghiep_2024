@page "/exam-review/{studentId:guid}/{examRoomTestCodeId:guid}"
@using global::Data.Model
@using global::Data.DTOs
@using System.Net.Http.Json
@layout Teacherlayout
@inject HttpClient client
@inject IHttpClientFactory clientFactory
@inject NavigationManager nav

<div class="exam-review-header">
    <h1>Phúc Khảo Bài Thi</h1>

    <div class="student-info">
        <p><strong>Tên học sinh:</strong> @studentName</p>
        <p><strong>Mã học sinh:</strong> @studentCode</p>
    </div>
</div>

@if (examDetails == null)
{
    <p class="loading">Đang tải dữ liệu...</p>
}
else
{
    <table class="table table-striped">
        <thead class="thead-blue">
            <tr>
                <th scope="col">Câu hỏi</th>
                <th scope="col">Đáp án của học sinh</th>
                <th scope="col">Đáp án đúng</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var question in examDetails)
            {
                <tr>
                    <td>@question.QuestionName</td>
                    <td>
                        @foreach (var answer in question.Answers)
                        {
                            <p class="student-answer">@answer</p>
                        }
                    </td>
                    <td>
                        @foreach (var correctAnswer in question.CorrectAnswers)
                        {
                            <p class="correct-answer">@correctAnswer</p>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<style>
    /* Toàn bộ phần tiêu đề */
    .exam-review-header {
        text-align: center;
        margin-bottom: 30px;
    }

    /* Phần h1 cho tiêu đề chính */
    h1 {
        font-family: 'Arial', sans-serif;
        font-size: 36px;
        color: #007bff;
        margin-bottom: 10px;
        text-shadow: 1px 1px 2px #aaa;
    }

    /* Phần hiển thị thông tin học sinh */
    .student-info {
        display: flex;
        justify-content: center; /* Căn giữa theo chiều ngang */
        gap: 20px; /* Khoảng cách giữa tên và mã */
        background-color: #e0f7fa;
        padding: 15px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border: 1px solid #dee2e6;
        font-family: 'Segoe UI', sans-serif;
    }

        .student-info p {
            margin: 0;
            font-size: 16px;
        }

    /* Phần bảng hiển thị */
    .table {
        width: 100%;
        border-collapse: collapse;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

        .table th, .table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
            font-family: 'Segoe UI', sans-serif;
        }

    .thead-blue th {
        background-color: #007bff; /* Màu xanh dương */
        color: white;
        font-size: 18px;
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f2f2f2;
    }

    .table-striped tbody tr:hover {
        background-color: #e9ecef;
    }

    /* Hiển thị thông báo loading */
    .loading {
        text-align: center;
        color: #007bff;
        font-size: 18px;
        font-family: 'Segoe UI', sans-serif;
    }

    /* Hiển thị đáp án của học sinh với màu đỏ */
    .student-answer {
        color: #dc3545;
    }

    /* Hiển thị đáp án đúng với màu xanh */
    .correct-answer {
        color: #28a745;
    }

    /* Hiệu ứng khi di chuột vào hàng trong bảng */
    .table tbody tr {
        transition: background-color 0.3s ease;
    }
</style>

@code {
    [Parameter] public Guid studentId { get; set; }
    [Parameter] public Guid examRoomTestCodeId { get; set; }
    private string studentName;
    private string studentCode;
    private List<TestQuestion_TestQuestionAnswersDTO> examDetails;

    protected override async Task OnInitializedAsync()
    {
        examDetails = await client.GetFromJsonAsync<List<TestQuestion_TestQuestionAnswersDTO>>($"api/ExamResult/get-student-question?studentId={studentId}&examRoomTestCodeId={examRoomTestCodeId}");
        // Gọi API lấy thông tin học sinh
        var studentInfo = await client.GetFromJsonAsync<StudentDTO>($"api/Student/get-by-studentId?studentId={studentId}");
        if (studentInfo != null)
        {
            studentName = studentInfo.Name;
            studentCode = studentInfo.Code;
        }
    }
}
