@page "/exam-room"
@using System.Text.Json
@using global::Data.Model
@using global::Data.DTOs
@using System.Net.Http.Json
@layout Teacherlayout
@inject HttpClient client
@inject IHttpClientFactory clientFactory
@inject IJSRuntime Jsruntime
@inject NavigationManager navigate

<div>
    <div class="row py-2">
        <div class="border d-flex">
            <div class="col-3 p-2">
                <div class="border shadow-sm" style="background-color:cornflowerblue">
                    <h5 class="p-2 text-white d-flex justify-content-center align-items-center">Thư mục</h5>
                </div>
                <div class="border min-vh-100">
                    @foreach (var item in testList)
                    {
                        <div>
                            <span class="target" value="@item.Id" type="button" @onclick="() => ToggleTest(item.Id)">
                                <i class="bi bi-folder-fill text-warning p-1"></i> @item.Name
                            </span>
                            @if (selectedTestId == item.Id)
                            {
                                <div class="mt-2">
                                    <label for="easyCount">Số câu dễ:</label>
                                    <input type="number" id="easyCount" @bind="easyCount" min="0" class="form-control mb-2" />

                                    <label for="mediumCount">Số câu trung bình:</label>
                                    <input type="number" id="mediumCount" @bind="mediumCount" min="0" class="form-control mb-2" />

                                    <label for="hardCount">Số câu khó:</label>
                                    <input type="number" id="hardCount" @bind="hardCount" min="0" class="form-control mb-2" />

                                    <label for="veryHardCount">Số câu nâng cao:</label>
                                    <input type="number" id="veryHardCount" @bind="veryHardCount" min="0" class="form-control mb-2" />

                                    <button class="btn btn-primary mt-2" @onclick="() => onlick(item.Id)"> Tạo ca thi</button>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
            <div class="col-9 p-2">
                <div class="border shadow-sm d-flex justify-content-between" style="background-color:cornflowerblue">
                    <div class="p-2">
                        <h5 class="text-white">Cấu trúc câu hỏi</h5>
                    </div>
                </div>
                <div class="border min-vh-50 p-2">
                    <div class="exam-container">
                        @foreach (var item in detailDTOs)
                        {
                            <h2 class="title">SỞ GD & ĐT THANH HÓA</h2>
                            <h3 class="school-name">TRƯỜNG THPT NGUYỄN TRÃI</h3>
                            <h4 class="year">NĂM HỌC 2017 - 2018</h4>

                            <h4 class="subject">MÔN: @item.NameSubject @item.Nameclass</h4>
                            <h5 class="time">Thời gian làm bài: @item.time phút</h5>
                            <h6 class="code">Mã đề thi: 169</h6>

                            <div class="student-info">
                                <span>Họ, tên sinh viên: ............................................</span><br />
                                <span>Số báo danh: .................................................</span>
                            </div>

                            <div class="content">
                                <h5>@item.NameQuestion</h5> <!-- Đưa h5 này ra ngoài vòng lặp -->
                                <ol type="A">
                                    @if (item.Type == 1 || item.Type == 2) // Trắc nghiệm 1 hoặc nhiều đáp án
                                    {
                                        foreach (var answer in item.Answers)
                                        {
                                            <li>@answer.Answer</li>
                                        }
                                    }
                                    else if (item.Type == 3) // Đúng/Sai
                                    {
                                        <li>Đúng</li>
                                        <li>Sai</li>
                                    }
                                    else if (item.Type == 4) // Điền vào chỗ trống
                                    {
                                        @foreach (var answer in item.Answers)
                                        {
                                            <p>Đáp án: @answer.Answer</p>
                                        }
                                    }
                                </ol>
                            </div>
                        }
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

@code {
    private List<DetailDTO> detailDTOs = new List<DetailDTO>();
    private List<DetailDTO> detail = new List<DetailDTO>();
    private List<TestQuestion_TestQuestionAnswersDTO> selectedQuestions = new List<TestQuestion_TestQuestionAnswersDTO>();
    private List<TestGridDTO> testList = new List<TestGridDTO>();
    private Guid? selectedTestId = null;
    private bool isLoading = false;
    private int easyCount;
    private int mediumCount;
    private int hardCount;
    private int veryHardCount;
    private async Task onlick(Guid id)
    {
        isLoading = true; // Bắt đầu tải
        try
        {
            await LoadDetailTest(id);
            await LoadQuestions(id);
           
        }
        finally
        {
            isLoading = false; // Kết thúc tải
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadTestList();
    }

    private async Task LoadTestList()
    {
        var client = clientFactory.CreateClient("Get");
        var url = "https://localhost:7039/api/Test/get-list-test";
        testList = await client.GetFromJsonAsync<List<TestGridDTO>>(url);
    }
   
    private async Task LoadDetailTest(Guid id)
    {
        var client = clientFactory.CreateClient("Get");
        var url = $"https://localhost:7039/api/TestQuestionDTO/Get-testcodes-by-testid?testId={id}";
        detailDTOs = await client.GetFromJsonAsync<List<DetailDTO>>(url);
    }

    private void ToggleTest(Guid id)
    {
        selectedTestId = selectedTestId == id ? null : id;
    }

    private async Task LoadQuestions(Guid id)
    {
        var response = await client.PostAsJsonAsync($"https://localhost:7039/api/TestQuestionDTO/randomize-questions-for-test-codes?testId={id}&easyCount={easyCount}&mediumCount={mediumCount}&hardCount={hardCount}&veryHardCount={veryHardCount}", selectedQuestions);

        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadAsStringAsync();
            Console.WriteLine(jsonString); // Kiểm tra nội dung JSON

            try
            {
                await ShowSuccessMessage("Thêm dữ liệu thành công!");
                selectedQuestions.Clear();
            }
            catch (Exception ex)
            {
                await ShowErrorMessage($"Có lỗi xảy ra khi phân tích dữ liệu: {ex.Message}");
            }
        }
        else
        {
            await ShowErrorMessage($"Có lỗi xảy ra. Mã lỗi: {response.StatusCode}");
        }
    }


    private async Task ShowSuccessMessage(string message)
    {
        await Jsruntime.InvokeVoidAsync("Swal.fire", new
        {
            title = "Thành công!",
            text = message,
            icon = "success",
            confirmButtonText = "OK"
        });
    }

    private async Task ShowErrorMessage(string message)
    {
        await Jsruntime.InvokeVoidAsync("Swal.fire", new
        {
            title = "Thất bại!",
            text = message,
            icon = "error",
            confirmButtonText = "OK"
        });
    }
}
