@inherits LayoutComponentBase
@using System.Text.Json
@using Database.DTOs
@using global::Data.DTOs
@inject IJSRuntime jsRuntime
@inject HttpClient httpClient
@inject NavigationManager navigate
@inject HttpClient httpclient

<PageTitle>Trang Chủ</PageTitle>
<main class="container-fluid">
    <nav class="sticky-top">
        <div class="row bg-light border-bottom align-items-center" style="height:85px">
            <div class="col-2 col-sm-3 col-md-2 text-center">
                <img src="img/Rectangle89.png" class="img-fluid" style="height:85px;" alt="" />
            </div>
            <div class="col-8 col-sm-6 col-md-7 pt-2">
                <ul class="nav justify-content-center">
                    <li class="nav-item d-flex">
                        <i class="bi bi-house-door-fill fs-4 text-primary"></i>
                        <NavLink class="nav-link fw-bolder active text-black-50" aria-current="page" href="/">Trang chủ</NavLink>
                    </li>
                    <li class="nav-item d-flex">
                        <i class="bi bi-mortarboard-fill fs-4 text-primary"></i>
                        @if (tokenResponse != null)
                        {
                            <NavLink class="nav-link fw-bolder text-black-50" href="online-exam">Thi online</NavLink>
                        }else
                        {
                            <NavLink class="nav-link fw-bolder text-black-50" href="" @onclick="ShowLoginForm">Thi online</NavLink>
                            
                        }
                       
                    </li>
                    <li class="nav-item d-flex">
                        <i class="bi bi-postcard-fill fs-4 text-primary"></i>
                        @if(tokenResponse != null)
                        {
                            <a class="nav-link fw-bolder text-black-50" href="/score_online">Bảng điểm</a>
                        }else{
                            <a class="nav-link fw-bolder text-black-50" @onclick="ShowLoginForm" href="">Bảng điểm</a>
                        }
                        
                    </li>
                    <li class="nav-item d-flex">
                        <i class="bi bi-person-rolodex fs-4 text-primary"></i>
                        <a class="nav-link fw-bolder text-black-50" aria-disabled="true" href="/contact">Liên hệ</a>
                    </li>
                </ul>
            </div>
            <div class="col-2  pt-2 d-flex justify-content-end">
                <i class="bi bi-person-circle fs-2 text-primary"></i>
                @if (tokenResponse != null)
                {
                    <span class="nav-link fw-bold text-black-50 p-2">@ShortenContent(userName, 10)</span>
                    <NavLink href="#" @onclick="HandleLogout" class="nav-link fw-bold text-black-50 p-2">Đăng xuất</NavLink>
                }
                else
                {
                    <NavLink href="#" @onclick="ShowLoginForm" class="nav-link fw-bold text-black-50 p-2">Đăng nhập</NavLink>
                    
                }
            </div>
            <div class="col-1 col-md-1 pt-2 position-relative d-none d-md-block">
                <i class="bi bi-bell-fill fs-2 text-primary notification-icon"></i>
                <span class="top-0 start-100 translate-middle badge rounded-pill bg-danger">
                    @unreadCount
                    <span class="visually-hidden">unread messages</span>
                </span>
                <ul class="notification-list position-absolute list-group">
                    @foreach (var item in data)
                    {
                        <li class="list-group-item fw-bold" style="height:100px" @onclick="() => HandleNotificationClick(item)">
                            <i class="bi bi-megaphone text-danger"></i> @item.Title <br />
                            <p class="fw-light text-wrap">@ShortenContent(item.Content, 50)</p>
                            <p class="fs-6 fst-italic fw-light">@item.CreationTime</p>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </nav>
    <article class=" flex-column min-vh-100">
        @Body
    </article>
    <!-- Form đăng nhập -->
    @if (isLoginFormVisible)
    {
        <div class="overlay d-flex justify-content-center align-items-center" style="height: 100vh;">
            <div class="login-form border rounded-4 shadow position-relative p-4" style="max-width: 600px; width: 100%; overflow: hidden;">
                <span class="ic btn-secondary position-absolute top-0 end-0 m-2" @onclick="HideLoginForm">
                    <i class="bi bi-x-lg fw-bold fs-3"></i>
                </span>
                <div class="row">
                    <div class="col-12 text-center mb-3">
                        <h2>Đăng Nhập</h2>
                    </div>
                    <div class="col-12 col-md-6 mb-3">
                        <img src="img/Rectangle89.png" alt="Alternate Text" class="img-fluid rounded-3" />
                    </div>
                    <div class="col-12 col-md-6">
                        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="mb-3">
                                <label for="username" class="form-label">Tên tài khoản hoặc Email</label>
                                <InputText id="username" @bind-Value="loginModel.Username" class="form-control" required />
                            </div>
                            <div class="mb-3">
                                <label for="password" class="form-label">Mật khẩu</label>
                                <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-control" required />
                            </div>
                            <div class="d-flex justify-content-center">
                                <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                                    @if (isLoading)
                                    {
                                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                    }
                                    Đăng nhập
                                </button>
                            </div>
                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger mt-3">@errorMessage</div>
                            }
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
</main>
<footer class="container-fluid mt-auto">
    <div class="row bg-dark-subtle py-3">
        <div class="col-4">
            <img class="w-50 h-100" style="margin-left:100px" src="img/Rectangle89.png" alt="Alternate Text" />
        </div>
        <div class="col-4 py-2">
            <div class="row">
                <p>Địa chỉ:</p>
            </div>
            <div class="row">
                <p>Số điện thoại:</p>
            </div>
            <div class="row">
                <p>Email:</p>
            </div>
            <div class="row">
                <p>Website:</p>
            </div>
        </div>
    </div>
</footer>
@code {
    private List<NotificationDTO> data = new List<NotificationDTO>();
    private int unreadCount = 0;
    private bool isLoginFormVisible = false;
    private bool isLoading = false;
    private LoginModel loginModel = new LoginModel();
    private string errorMessage;
    private string userName;
    private TokenResponse tokenResponse;
    private void ShowLoginForm() => isLoginFormVisible = true;
    private void HideLoginForm() => isLoginFormVisible = false;

    protected override async Task OnInitializedAsync()
    {
        data = await httpclient.GetFromJsonAsync<List<NotificationDTO>>("api/Notification/get-all-notification");
        unreadCount = data.Count;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var token = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "YourSuperSecretKeyHere");

            if (!string.IsNullOrEmpty(token))
            {
                // Lưu token vào tokenResponse
                tokenResponse = new TokenResponse { Token = token };
                // Giải mã token để lấy thông tin người dùng
                var handler = new System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler();
                var jsonToken = handler.ReadToken(token) as System.IdentityModel.Tokens.Jwt.JwtSecurityToken;
                // Lấy tên người dùng từ claim "name" (nếu được lưu trong token)
                var time = jsonToken?.Claims.FirstOrDefault(temp => temp.Type == "exp");
                if (time != null)
                {
                    var off = DateTimeOffset.FromUnixTimeSeconds(long.Parse(time.Value)).UtcDateTime;
                    if (off < DateTime.UtcNow.AddMinutes(1))
                    {
                        var response = await httpclient.PostAsync("api/User/logout", null);
                        await jsRuntime.InvokeVoidAsync("localStorage.removeItem", "YourSuperSecretKeyHere");
                        tokenResponse = null;
                        userName = null;
                        navigate.NavigateTo("/",forceLoad:true);
                        
                    }
                }
                var role= jsonToken?.Claims.FirstOrDefault(temp=>temp.Type=="Id")?.Value;
                if (role == "Student")
                {
                    userName = jsonToken?.Claims.FirstOrDefault(c => c.Type == "name")?.Value;
                    navigate.NavigateTo("/");
                }
                else if(role=="Teacher")
                {
                    userName = jsonToken?.Claims.FirstOrDefault(c => c.Type == "name")?.Value;
                    navigate.NavigateTo("/Counter");
                }
                // Cập nhật giao diện với tên người dùng
                StateHasChanged();
            }
        }
    }
    private async Task HandleLogin()
    {
        isLoading = true;
        var response = await httpclient.PostAsJsonAsync("api/User/login", loginModel);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<TokenResponse>();
            // Lưu token vào Local Storage
            await jsRuntime.InvokeVoidAsync("localStorage.setItem", "YourSuperSecretKeyHere", result.Token);
            navigate.NavigateTo("", forceLoad: true);
            isLoading = false;
            HideLoginForm();
            StateHasChanged();
            navigate.NavigateTo("/");
        }
        else
        {
            errorMessage = "Tên đăng nhập hoặc mật khẩu không chính xác.";
            isLoading = false;
            loginModel.Username=string.Empty;
            loginModel.Password = string.Empty;
            StateHasChanged();
        }
    }
    private async Task HandleLogout()
    {
        var response = await httpclient.PostAsync("api/User/logout", null);

        if (response.IsSuccessStatusCode)
        {
            await jsRuntime.InvokeVoidAsync("localStorage.removeItem", "YourSuperSecretKeyHere");
            tokenResponse = null;
            userName = null; 
            navigate.NavigateTo("/");
        }
    }
    private void HandleNotificationClick(NotificationDTO item)
    {
        if (unreadCount > 0)
        {
            unreadCount--;
            StateHasChanged();
        }
    }
    private string ShortenContent(string content, int maxLength)
    {
        if (string.IsNullOrEmpty(content))
        {
            return content;
        }
        return content.Length > maxLength ? content.Substring(0, maxLength) + "..." : content;
    }
}
<style>
    .overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 999;
    }

    .login-form {
        background-color: white;
        padding: 20px;
        width: 500px;
        height: 350px;
    }

    .ic {
        cursor: pointer; 
        font-size: 30px; 
        color: red;
        background-color: white;
    }

</style>
